using AuthApp.DataAccess;
using Microsoft.AspNetCore.Authentication;
using Microsoft.EntityFrameworkCore;
using Microsoft.OpenApi.Models;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddDbContext<AuthApp.DataAccess.DBContext>(options =>
{
    // For demonstration, using InMemory database. Replace with real DB in production.
    options.UseInMemoryDatabase("AuthAppInMemoryDb");
});
DbInitializer.EnsureSeedData(builder.Services.BuildServiceProvider());
builder.Services.AddScoped<AuthApp.Services.IUserManagementService, AuthApp.Services.UserManagementService>();

// Register CORS policy allowing http://localhost:5095
var corsPolicyName = "LocalPolicy";
builder.Services.AddCors(options =>
{
    options.AddPolicy(name: corsPolicyName, policy =>
    {
        policy.WithOrigins("http://localhost:4200")
              .AllowAnyHeader()
              .AllowAnyMethod()
              .AllowCredentials();
    });
});

// Register authentication with a named scheme "BasicAuthentication".
builder.Services.AddAuthentication("BasicAuthentication")
    .AddScheme<AuthenticationSchemeOptions, BasicAuthenticationHandler>("BasicAuthentication", options => { });

builder.Services.AddControllers();

// Register Swagger/OpenAPI services
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(options =>
{
    // Basic metadata - adjust as needed
    options.SwaggerDoc("v1", new Microsoft.OpenApi.Models.OpenApiInfo
    {
        Title = builder.Environment.ApplicationName ?? "API",
        Version = "v1",
        Description = "API documentation (Swagger) generated by SwaggerGen"
    });

    // Add Basic Authentication definition for Swagger (this makes the "Authorize" button available)
    options.AddSecurityDefinition("BasicAuthentication", new OpenApiSecurityScheme
    {
        Name = "Authorization",
        Type = SecuritySchemeType.Http,
        Scheme = "basic",
        In = ParameterLocation.Header,
        Description = "Basic Authentication header using the Bearer scheme. Enter username and password when prompted by the UI."
    });

    // Make the security requirement global (applies to all operations unless overridden)
    options.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "BasicAuthentication"
                }
            },
            new string[] { }
        }
    });

    // (Optional) Include XML comments if available (uncomment and adjust path)
    // var xmlFile = $"{System.Reflection.Assembly.GetExecutingAssembly().GetName().Name}.xml";
    // var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
    // if (File.Exists(xmlPath)) options.IncludeXmlComments(xmlPath);
});

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    // Enable middleware to serve generated Swagger as JSON endpoint.
    app.UseSwagger();

    // Enable middleware to serve swagger-ui (HTML, JS, CSS, etc.),
    // specifying the Swagger JSON endpoint.
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "v1");
        c.RoutePrefix = string.Empty; // Serve the UI at app root (https://localhost:<port>/)
    });
}

app.UseHttpsRedirection();

// Enable CORS using the defined policy BEFORE authentication so preflight and requests succeed.
app.UseCors(corsPolicyName);

// Add authentication middleware before authorization.
app.UseAuthentication();

app.UseAuthorization();

app.MapControllers();

app.Run();
