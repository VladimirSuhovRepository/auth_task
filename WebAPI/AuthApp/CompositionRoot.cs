using AuthApp.DataAccess;
using AuthApp.Services;
using Microsoft.AspNetCore.Authentication;
using Microsoft.EntityFrameworkCore;
using Microsoft.OpenApi.Models;

namespace AuthApp.CompositionRoot
{
    /// <summary>
    /// Composition root helpers for registering application services and infrastructure.
    /// Use in Program.cs:
    ///     builder.Services.AddApplicationServices(builder.Configuration);
    ///     DbInitializer.EnsureSeedData(builder.Services.BuildServiceProvider());
    /// </summary>
    public static class DependencyInjection
    {
        // Reuse this constant from Program.cs to avoid string duplication.
        public const string LocalCorsPolicy = "LocalPolicy";

        /// <summary>
        /// Register application services, persistence, CORS, authentication and Swagger.
        /// Designed to centralize DI registrations.
        /// </summary>
        public static IServiceCollection AddApplicationServices(this IServiceCollection services, IConfiguration configuration)
        {
            // 1) Persistence: InMemory by default (match existing Program.cs)
            services.AddDbContext<DBContext>(options =>
            {
                options.UseInMemoryDatabase("AuthAppInMemoryDb");
            });

            // 2) Application services
            services.AddScoped<IUserManagementService, UserManagementService>();

            // 3) CORS policy
            services.AddCors(options =>
            {
                options.AddPolicy(name: LocalCorsPolicy, policy =>
                {
                    policy.WithOrigins("http://localhost:4200")
                          .AllowAnyHeader()
                          .AllowAnyMethod()
                          .AllowCredentials();
                });
            });

            // 4) Authentication: Basic scheme wired to BasicAuthenticationHandler
            services.AddAuthentication("BasicAuthentication")
                .AddScheme<AuthenticationSchemeOptions, BasicAuthenticationHandler>("BasicAuthentication", options => { });

            // 5) Controllers (keeps registration inline with Program.cs)
            services.AddControllers();

            // 6) Swagger/OpenAPI configuration (same metadata and security as Program.cs)
            services.AddEndpointsApiExplorer();
            services.AddSwaggerGen(options =>
            {
                options.SwaggerDoc("v1", new OpenApiInfo
                {
                    Title = "API",
                    Version = "v1",
                    Description = "API documentation (Swagger) generated by SwaggerGen"
                });

                options.AddSecurityDefinition("BasicAuthentication", new OpenApiSecurityScheme
                {
                    Name = "Authorization",
                    Type = SecuritySchemeType.Http,
                    Scheme = "basic",
                    In = ParameterLocation.Header,
                    Description = "Basic Authentication header. Enter username and password when prompted by the UI."
                });

                options.AddSecurityRequirement(new OpenApiSecurityRequirement
                {
                    {
                        new OpenApiSecurityScheme
                        {
                            Reference = new OpenApiReference
                            {
                                Type = ReferenceType.SecurityScheme,
                                Id = "BasicAuthentication"
                            }
                        },
                        Array.Empty<string>()
                    }
                });
            });

            return services;
        }
    }
}